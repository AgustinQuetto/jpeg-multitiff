const express = require('express')
const router = express.Router()
const sharp = require('sharp')
const fs = require('fs')

/* GET home page. */
// router.get('/', function (req, res, next) {
//  res.render('index', { title: 'Express' })
// })

router.post('/', (req, res, next) => {
  /*
  const downsizeProfileImgForTweet = (path) => {
    let imgBuffer = Buffer.from(path, 'base64')
    sharp(imgBuffer)
      .flatten()
      .tiff()
      .toFile('public/images/data.tif')
      .then(data => {
        console.log('success')
        console.log(data)
        res.sendStatus(200)
      })
      .catch(err => console.log(`downisze issue ${err}`))
  }

  downsizeProfileImgForTweet('')

  let jpeg = fs.readFileSync('public/images/SP000.jpg')

  // convert buffers
  sharp(jpeg).toFile('public/images/SP000.tif')
  */
  // convert files
  let imgBuffer = Buffer.from(req.body.imagen, 'base64')
  sharp(imgBuffer).toFile('public/images/output/SP0001.tif')
})

module.exports = router
